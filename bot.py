import json  # noqa: D100
import logging
import re
from configparser import ConfigParser
from random import randint

import telebot
from telebot.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from tinydb import Query, TinyDB

from database.database import PostgreClient
from models.dalle import OpenaiClient
from models.embeddings import Embeddings
from models.kandinsky import KandinskyClient
from queue_bot import add_request_to_queue, get_queue_length, start_thread

gods = [1038099964, 1030055969]
prices = {20: 80, 50: 200, 100: 390, 500: 1950, 1000: 3800, 5000: 18500}

# Configure logging settings
logging.basicConfig(filename="logs.log", format="%(asctime)s %(message)s", filemode="w")
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Initialize the ConfigParser
parser = ConfigParser()
parser.read("configs.ini")

# Get values from the config file
testing = True

token = parser["DEFAULTS"].get("TOKEN")
test_token = parser["DEFAULTS"].get("TEST_TOKEN")
yookassa_token = parser["DEFAULTS"].get("YOOKASSA_TOKEN")

delay = int(parser["DEFAULTS"].get("delay")) if not testing else 10

test_bot_name = parser["DEFAULTS"].get("test_bot_name")
bot_name = parser["DEFAULTS"].get("bot_name") if not testing else test_bot_name

kandinsky_api_key = parser["IMAGEGEN"].get("kandisky_api_key")
kandinsky_secret_key = parser["IMAGEGEN"].get("kandinsky_secret_key")
dalle_api_key = parser["IMAGEGEN"].get("dalle_api_key")

host = parser["DATABASE"].get("host")
username = parser["DATABASE"].get("username")
password = parser["DATABASE"].get("password")

user_db_name = parser["DATABASE"].get("user_db_name")
games_db_name = parser["DATABASE"].get("games_db_name")

# Initialize the telebot and OpenaiClient
bot = telebot.TeleBot(test_token if testing else token)
dalle_client = OpenaiClient(dalle_api_key)
kandinsky_client = KandinskyClient(
    "https://api-key.fusionbrain.ai/",
    kandinsky_api_key,
    kandinsky_secret_key,
)
embedding_client = Embeddings()

# Dictionary to store game data
games_db = TinyDB("database/games.json")
User = Query()
if not testing:
    database_client = PostgreClient(
        host=host,
        logger=logger,
        password=password,
        dbname=user_db_name,
        user=username,
    )
    database_client.init_user_table()

for game in games_db.all():
    game_id = game["id"]
    bot.send_message(
        int(game_id),
        "‚ú® *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ*. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–≥—Ä–∞—Ç—å.",
        parse_mode="Markdown",
    )

print("bot started")  # noqa: T201


@bot.callback_query_handler(func=lambda _: True)
def handle_query(call: telebot.types.CallbackQuery) -> None:
    """Handle button's callback.

    Parameters
    ----------
    call : telebot.types.CallbackQuery
        the call

    Returns
    -------
    None

    """
    match call.data.split(";")[0]:
        # case "model_change":
        #     selected_model = (
        #         "kandinsky" if call.data.split(";")[1] == "dall-e" else "dall-e"
        #     )
        #     bot.edit_message_text(
        #         f"–ß—Ç–æ–±—ã –∑–∞–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üòÅ\n–ú–æ–¥–µ–ª—å: *{selected_model}*\n–¶–µ–Ω–∞ –∏–≥—Ä—ã: *{'1 —Ç–æ–∫–µ–Ω' if selected_model == 'kandinsky' else '4 —Ç–æ–∫–µ–Ω–∞'}*",
        #         call.message.chat.id,
        #         call.message.message_id,
        #         parse_mode="Markdown",
        #     )
        #     bot.edit_message_reply_markup(
        #         call.message.chat.id,
        #         call.message.message_id,
        #         reply_markup=InlineKeyboardMarkup(
        #             [
        #                 [
        #                     InlineKeyboardButton(
        #                         text="üß† –ó–∞–≥–∞–¥–∞—Ç—å!",
        #                         url=f"https://t.me/{bot_name}?start=pick{call.message.chat.id}_{selected_model}",
        #                     ),
        #                 ],
        #                 [
        #                     InlineKeyboardButton(
        #                         text="üîÅ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å",
        #                         callback_data=f"model_change;{selected_model}",
        #                     ),
        #                 ],
        #             ],
        #         ),
        #     )
        #     bot.answer_callback_query(call.id)
        case "play":
            bot.answer_callback_query(call.id)
            play(call.message)
        case "about_models":
            bot.answer_callback_query(call.id)
            models(call.message)
        case "add_balance":
            bot.edit_message_text(
                "üëë –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã, –Ω–∞–∂–º–∏ –Ω–∞ –∫–∞–∫—É—é-—Ç–æ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.\n\nüòÅ –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Ä–∞–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞!",  # noqa: E501",
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown",
            )

            bot.edit_message_reply_markup(
                call.message.chat.id,
                call.message.message_id,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="üí≥ 20 —Ç–æ–∫–µ–Ω–æ–≤ - 80 —Ä.",  # noqa: RUF001,
                                callback_data="buy_tokens;20",
                            ),
                        ],
                        [
                            InlineKeyboardButton(
                                text="üí≥ 50 —Ç–æ–∫–µ–Ω–æ–≤ - 200 —Ä.",  # noqa: RUF001,
                                callback_data="buy_tokens;50",
                            ),
                        ],
                        [
                            InlineKeyboardButton(
                                text="üí≥ 100 —Ç–æ–∫–µ–Ω–æ–≤ - 390 —Ä. (-2.5%)",  # noqa: RUF001,
                                callback_data="buy_tokens;100",
                            ),
                        ],
                        [
                            InlineKeyboardButton(
                                text="üí≥ 500 —Ç–æ–∫–µ–Ω–æ–≤ - 1950 —Ä. (-2.5%)",  # noqa: RUF001,
                                callback_data="buy_tokens;500",
                            ),
                        ],
                        [
                            InlineKeyboardButton(
                                text="üí≥ 1000 —Ç–æ–∫–µ–Ω–æ–≤ - 3800 —Ä. (-5%)",  # noqa: RUF001,
                                callback_data="buy_tokens;1000",
                            ),
                        ],
                        [
                            InlineKeyboardButton(
                                text="üí≥ 5000 —Ç–æ–∫–µ–Ω–æ–≤ - 18500 —Ä. (-7.5%)",  # noqa: RUF001,
                                callback_data="buy_tokens;5000",
                            ),
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                callback_data="back_to_balance",
                            ),
                        ],
                    ],
                ),
            )

            bot.answer_callback_query(call.id)
        case "back_to_balance":
            tokens = database_client.get_user_string_by_id(str(call.from_user.id))[3]

            bot.edit_message_text(
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: *{tokens}* {get_str_token(tokens)}.",
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown",
            )

            bot.edit_message_reply_markup(
                call.message.chat.id,
                call.message.message_id,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",  # noqa: RUF001
                                callback_data="add_balance",
                            ),
                        ],
                    ],
                ),
            )

            bot.answer_callback_query(call.id)
        case "buy_tokens":
            amount = int(call.data.split(";")[1])

            pr_data = json.dumps(
                {
                    "receipt": {
                        "items": [
                            {
                                "description": f"{amount} —Ç–æ–∫–µ–Ω–æ–≤",
                                "quantity": "1.00",
                                "amount": {
                                    "value": f"{prices[amount]}.00",
                                    "currency": "RUB",
                                },
                                "vat_code": 1,
                            },
                        ],
                    },
                },
            )

            bot.send_invoice(
                call.message.chat.id,
                f"{amount} —Ç–æ–∫–µ–Ω–æ–≤",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ. –û–ø–ª–∞—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –∫–∞—Ä—Ç–µ. –ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email-–∞–¥—Ä–µ—Å –ø—Ä–∏–¥—ë—Ç —á–µ–∫ –æ –ø–æ–∫—É–ø–∫–µ.",  # noqa: E501, RUF001
                f"{amount};{call.from_user.id}",
                yookassa_token,
                "RUB",
                [telebot.types.LabeledPrice(f"{amount} —Ç–æ–∫–µ–Ω–æ–≤", prices[amount] * 100)],
                need_email=True,
                send_email_to_provider=True,
                provider_data=pr_data,
            )

            logger.info(f"User {call.from_user.id} created payment for {amount} tokens")  # noqa: G004

            bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.pre_checkout_query_handler(func=lambda _: True)
def process_pre_checkout_query(
    pre_checkout_query: telebot.types.PreCheckoutQuery,
) -> None:
    """Process pre-checkout query.

    Parameters
    ----------
    pre_checkout_query : telebot.types.PreCheckoutQuery
        pre-checkout query

    Returns
    -------
    None

    """
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@bot.message_handler(content_types=["successful_payment"])
def handle_successful_payment(message: telebot.types.Message) -> None:
    """Handle successful payment.

    Parameters
    ----------
    message : telebot.types.Message
        successful payment message

    Returns
    -------
    None

    """
    transaction_id = message.successful_payment.provider_payment_charge_id

    tokens_got = message.successful_payment.invoice_payload.split(";")[0]
    user_id = message.successful_payment.invoice_payload.split(";")[1]

    database_client.add_credits_to_user(user_id, tokens_got)

    current_tokens = database_client.get_user_string_by_id(user_id)[3]

    bot.send_message(
        message.chat.id,
        f"üëë *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!*\n\nüí∏ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ *{tokens_got} —Ç–æ–∫–µ–Ω–æ–≤*\n\nüí∞ –°–µ–π—á–∞—Å —É –≤–∞—Å *{current_tokens} {get_str_token(current_tokens)}*",  # noqa: RUF001, E501*",*",
        parse_mode="Markdown",
    )

    logger.info(
        f"User {user_id} successfully paid and got {tokens_got} tokens | tr_id {transaction_id}",  # noqa: G004, E501
    )


def contains_only_english_letters(word: str) -> bool:
    """Check if word only contains english letters.

    Parameters
    ----------
    word : str
        word that will be checked

    Returns
    -------
    bool

    """
    return bool(re.match("^[a-zA-Z]+$", word))


def get_parameter(text: str) -> str:
    """Get the argument from the command.

    Parameters
    ----------
    text : str
        the text from which to get the argument from

    Returns
    -------
    str
        the argument

    """
    try:
        return text.split()[1] if 3 > len(text.split()) > 1 else ""  # noqa: PLR2004
    except Exception:  # noqa: BLE001
        return ""


def get_price(model: str) -> int:
    """Get the price of the game.

    Parameters
    ----------
    model : str
        model name

    Returns
    -------
    int
        the price

    """
    return 1 if model == "kandinsky" else 4


@bot.message_handler(commands=["start", "help"])
def start(message: telebot.types.Message) -> None:  # noqa: PLR0912
    """Do most of the game's functions.

    Parameters
    ----------
    message : telebot.types.Message
        message

    Returns
    -------
    None

    """
    try:
        # Get the parameter from the message text
        param = get_parameter(message.text)

        # Check if the parameter is empty
        if not param:
            if message.chat.type == "private" and not testing:
                database_client.add_user_if_not_exists(message.from_user.id)

            bot.send_message(
                message.chat.id,
                "üëã *–ü—Ä–∏–≤–µ—Ç!*\n\n–Ø - –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –∑–∞–≥–∞–¥—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –æ—Ç–≥–∞–¥—ã–≤–∞–ª–∏ –∏—Ö –ø–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –∫–∞—Ä—Ç–∏–Ω–∫–µ. –Ø –±—É–¥—É –¥–∞–≤–∞—Ç—å –∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ —É–∫–∞–∑—ã–≤–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ –±–ª–∏–∑–∫–∏ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É.\n–í –∏–≥—Ä—É –ø–æ–∫–∞ —á—Ç–æ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n\nüìÑ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ [–ø–æ —Å—Å—ã–ª–∫–µ](https://foxfil.xyz/contexto/docs).",  # noqa: E501, RUF001",",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="üéÆ –ò–≥—Ä–∞—Ç—å!",
                                callback_data="play",
                            ),
                        ],
                        # [
                        #     InlineKeyboardButton(
                        #         text="üìå –û –º–æ–¥–µ–ª—è—Ö",
                        #         callback_data="about_models",
                        #     ),
                        # ],
                    ],
                ),
            )
        else:  # noqa: PLR5501
            # Check if the message is sent in a private chat
            if message.chat.type == "private":
                if not testing:
                    database_client.add_user_if_not_exists(message.from_user.id)

                if param.startswith("pick"):
                    # Extract the group ID from the parameter
                    group_id = param.split("_")[0][4:]
                    selected_model = param.split("_")[1]

                    if group_id.startswith("-"):
                        # Check if a game is already in progress for the group ID
                        if games_db.search(User.id == str(group_id)):
                            bot.send_message(
                                message.chat.id,
                                "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç –∏–ª–∏ –≤—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!",
                            )
                        elif database_client.get_user_string_by_id(
                            message.from_user.id,
                        )[3] < get_price(selected_model):
                            bot.send_message(
                                message.chat.id,
                                "‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑—É—è /balance.",  # noqa: E501, RUF001
                            )
                        else:
                            # Prompt the user to send a word to be guessed
                            answer_message = bot.send_message(
                                message.chat.id,
                                f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∑–∞–≥–∞–¥–∞—Ç—å! üò®\n–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: *{selected_model}*",  # noqa: E501,, RUF001,
                                parse_mode="Markdown",
                            )
                            # Register a handler for the next message to start word picking  # noqa: E501
                            bot.register_next_step_handler(
                                answer_message,
                                start_word_picking,
                                int(group_id),
                                selected_model,
                            )
                    else:
                        bot.send_message(
                            message.chat.id,
                            "‚ùå –ù–µ –ø—ã—Ç–∞–π—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!",  # noqa: RUF001
                        )
            else:
                # Send an error message if the command with parameter is used in a group chat  # noqa: E501
                bot.send_message(
                    message.chat.id,
                    "‚ùå –ö–æ–º–∞–Ω–¥—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!",  # noqa: E501, RUF001
                )
    except Exception as e:  # noqa: BLE001
        # Send an error message if an exception occurs
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",  # noqa: RUF001, E501
            parse_mode="Markdown",
        )
        logger.error(f"ERROR: {e}")  # noqa: TRY400, G004


@bot.message_handler(commands=["play"])
def play(message: telebot.types.Message, change_model: bool = False) -> None:  # noqa: FBT002, FBT001
    """Generate the game link, send it to the chat.

    Parameters
    ----------
    message : telebot.types.Message
        model name
    change_model: bool, optional
        if the model should be changed from basic "kandinsky" to "dall-e" (default is False)

    Returns
    -------
    int
        the price

    """  # noqa: E501
    try:
        if message.chat.type != "private":
            if not games_db.search(User.id == str(message.chat.id)):
                selected_model = "kandinsky" if not change_model else "dall-e"

                bot.send_message(
                    message.chat.id,
                    f"–ß—Ç–æ–±—ã –∑–∞–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üòÅ\n–ú–æ–¥–µ–ª—å: *{selected_model}*\n–¶–µ–Ω–∞ –∏–≥—Ä—ã: *{'1 —Ç–æ–∫–µ–Ω' if selected_model == 'kandinsky' else '4 —Ç–æ–∫–µ–Ω–∞'}*",  # noqa: RUF001,, E501,
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    text="üß† –ó–∞–≥–∞–¥–∞—Ç—å!",
                                    url=f"https://t.me/{bot_name}?start=pick{message.chat.id}_{selected_model}",
                                ),
                            ],
                            # [
                            #     InlineKeyboardButton(
                            #         text="üîÅ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å",
                            #         callback_data=f"model_change;{selected_model}",
                            #     ),
                            # ],
                        ],
                    ),
                    parse_mode="Markdown",
                )
            else:
                # Send a message indicating that a game is already in progress
                bot.send_message(
                    message.chat.id,
                    "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç –∏–ª–∏ –≤—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!",
                    parse_mode="Markdown",
                )
        else:
            # Send a message indicating that the command can only be used in a group chat  # noqa: E501
            bot.send_message(
                message.chat.id,
                "‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!",
            )
    except Exception as e:  # noqa: BLE001
        # Send a message indicating that an error occurred
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",  # noqa: RUF001, E501
            parse_mode="Markdown",
        )
        logger.error(f"ERROR: {e}")  # noqa: TRY400, G004


def from_queue_processing(request: tuple) -> None:
    """Process games from queue.

    Parameters
    ----------
    request : tuple
        data tuple

    Returns
    -------
    None

    """
    answer, group_id, dms_id, user_nick, message_queue_id, user_id, selected_model = (
        request
    )

    bot.delete_message(dms_id, message_queue_id)

    games_db.upsert(
        {"id": str(group_id), "data": [answer, {}, "", {}, ""]},
        User.id == str(group_id),
    )

    image_generation = bot.send_message(
        dms_id,
        f'–ö–∞—Ä—Ç–∏–Ω–∫–∞ "*{answer}*" –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è üòé',
        parse_mode="Markdown",
    )
    status, generated_photo_bytes = (
        kandinsky_client.generate_image(answer)
        if selected_model == "kandinsky"
        else dalle_client.generate_image(answer)
    )

    if status == 200:  # noqa: PLR2004
        database_client.remove_credits_from_user(dms_id, get_price(selected_model))

        sent_image = bot.send_photo(
            group_id,
            generated_photo_bytes,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{user_nick}* –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ!\n\n–ü–∏—à–∏—Ç–µ —Å–≤–æ–∏ –¥–æ–≥–∞–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `/guess –æ—Ç–≤–µ—Ç`, `guess –æ—Ç–≤–µ—Ç` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!\n\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø —Å–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/top –∫–æ–ª-–≤–æ` (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5).\n\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ `/stop`.",  # noqa: RUF001, E501
            parse_mode="Markdown",
        )
        bot.delete_message(dms_id, image_generation.message_id)

        games_db.upsert(
            {
                "id": str(group_id),
                "data": [answer, {}, sent_image.photo[0].file_id, {}, user_id],
            },
            User.id == str(group_id),
        )

        bot.send_message(
            dms_id,
            f'–í–∞—à–µ —Å–ª–æ–≤–æ "*{answer}*" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥–∞–¥–∞–Ω–æ! ‚úÖ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥—Ä—É–ø–ø—É.',
            parse_mode="Markdown",
        )

    else:
        games_db.remove(doc_ids=[games_db.search(User.id == str(group_id))[0].doc_id])
        bot.delete_message(dms_id, image_generation.message_id)
        bot.send_message(
            dms_id,
            "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞.",
            parse_mode="Markdown",
        )
        bot.send_message(
            group_id,
            "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.",
            parse_mode="Markdown",
        )


def start_word_picking(
    message: telebot.types.Message, group_id: int, selected_model: str,
) -> None:
    """Start word picking.

    Parameters
    ----------
    message : telebot.types.Message
        message
    group_id: int
        id of the group the game will be played in
    selected_model: str
        selected model

    Returns
    -------
    None

    """
    try:
        # Check if a game is already in progress
        if games_db.search(User.id == str(group_id)):
            bot.send_message(message.chat.id, "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç –∏–ª–∏ –≤—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!")
        else:  # noqa: PLR5501
            if message.text:
                answer = message.text.strip().lower()
                # Check if the answer is a single word
                if not len(answer.split()) > 1:
                    # Check if the answer contains only English letters
                    if contains_only_english_letters(answer):
                        answer_embedding = embedding_client.get_embedding(answer)
                        # Check if the answer exists in the embeddings
                        if embedding_client.exist(answer_embedding):
                            logging.info(
                                f"Game started | ans: {answer} | g_id: {group_id}",  # noqa: G004
                            )

                            lenght = get_queue_length() + 1

                            games_db.upsert(
                                {"id": str(group_id), "data": [answer, {}, "", {}, ""]},
                                User.id == str(group_id),
                            )

                            wait_time = lenght * delay

                            queue_message = bot.send_message(
                                message.chat.id,
                                "‚åõ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: "  # noqa: RUF001
                                + (
                                    f"*{wait_time // 60}* –º–∏–Ω."
                                    if (wait_time // 60) > 0
                                    else f"*{wait_time}* —Å–µ–∫."
                                ),
                                parse_mode="Markdown",
                            )

                            add_request_to_queue(
                                answer,
                                group_id,
                                message.chat.id,
                                message.from_user.full_name,
                                queue_message.id,
                                message.from_user.id,
                                logger,
                                selected_model,  # model user selected
                            )

                        else:
                            bot.send_message(
                                message.chat.id,
                                "‚ùå –¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                                reply_markup=InlineKeyboardMarkup(
                                    [
                                        [
                                            InlineKeyboardButton(
                                                text="–ó–∞–≥–∞–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
                                                url=f"https://t.me/{bot_name}?start=pick{group_id}_{selected_model}",
                                            ),
                                        ],
                                    ],
                                ),
                            )
                    else:
                        bot.send_message(
                            message.chat.id,
                            "‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤!",  # noqa: E501
                            reply_markup=InlineKeyboardMarkup(
                                [
                                    [
                                        InlineKeyboardButton(
                                            text="–ó–∞–≥–∞–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
                                            url=f"https://t.me/{bot_name}?start=pick{group_id}_{selected_model}",
                                        ),
                                    ],
                                ],
                            ),
                        )
                else:
                    bot.send_message(
                        message.chat.id,
                        "‚ùå –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–ª–æ–≤–æ, –∞ –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!",  # noqa: RUF001
                        reply_markup=InlineKeyboardMarkup(
                            [
                                [
                                    InlineKeyboardButton(
                                        text="–ó–∞–≥–∞–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
                                        url=f"https://t.me/{bot_name}?start=pick{group_id}_{selected_model}",
                                    ),
                                ],
                            ],
                        ),
                    )
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ, –∞ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É/—Ñ–∞–π–ª/–æ–ø—Ä–æ—Å!",  # noqa: RUF001
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    text="–ó–∞–≥–∞–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
                                    url=f"https://t.me/{bot_name}?start=pick{group_id}_{selected_model}",
                                ),
                            ],
                        ],
                    ),
                )
    except Exception as e:  # noqa: BLE001
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",  # noqa: RUF001, E501
            parse_mode="Markdown",
        )
        logger.error(f"ERROR: {e}")  # noqa: TRY400, G004


@bot.message_handler(commands=["guess"])
def guess(message: Message) -> None:  # noqa: PLR0912, PLR0915, C901
    """Guess word in the group.

    Parameters
    ----------
    message : telebot.types.Message
        message

    Returns
    -------
    None

    """
    try:
        group_id = message.chat.id

        if not games_db.search(User.id == str(group_id)):
            bot.send_message(message.chat.id, "‚ùå –°–µ–π—á–∞—Å –Ω–µ –∏–¥–µ—Ç –Ω–∏–∫–∞–∫–∞—è –∏–≥—Ä–∞!")
        else:  # noqa: PLR5501
            if message.chat.type != "private":
                param = get_parameter(message.text)
                if param:
                    if games_db.search(User.id == str(group_id))[0]["data"][2] != "":
                        if contains_only_english_letters(param):
                            given_try = param.lower().strip()
                            correct_answer = (
                                games_db.search(User.id == str(group_id))[0]["data"][0]
                                .lower()
                                .strip()
                            )
                            if correct_answer == given_try:
                                if games_db.search(User.id == str(group_id)):
                                    new_dict = games_db.search(
                                        User.id == str(group_id),
                                    )[0]["data"][3]

                                    new_dict[str(message.from_user.id)] = [
                                        *new_dict.get(str(message.from_user.id), []),
                                        100,
                                    ]

                                    games_db.upsert(
                                        {
                                            "id": str(group_id),
                                            "data": [
                                                correct_answer,
                                                games_db.search(
                                                    User.id == str(group_id),
                                                )[0]["data"][1],
                                                games_db.search(
                                                    User.id == str(group_id),
                                                )[0]["data"][2],
                                                new_dict,
                                                games_db.search(
                                                    User.id == str(group_id),
                                                )[0]["data"][4],
                                            ],
                                        },
                                        User.id == str(group_id),
                                    )
                                    top_final("10", message.chat.id)
                                    scoreboard_final(message.chat.id)
                                    if (
                                        len(
                                            games_db.search(User.id == str(group_id))[
                                                0
                                            ]["data"][3][str(message.from_user.id)],
                                        )
                                        == 1
                                    ):
                                        bot.send_message(
                                            group_id,
                                            f"üéâ *{message.from_user.full_name}*, –º–æ–ª–æ–¥–µ—Ü! –¢—ã –æ—Ç–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ *{correct_answer}* —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏! –í–æ—Ç —ç—Ç–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ! ü§Ø",  # noqa: E501, RUF001",",
                                            parse_mode="Markdown",
                                            reply_markup=InlineKeyboardMarkup(
                                                [
                                                    [
                                                        InlineKeyboardButton(
                                                            text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞!",
                                                            callback_data="play",
                                                        ),
                                                    ],
                                                ],
                                            ),
                                        )
                                    else:
                                        bot.send_message(
                                            group_id,
                                            f"üéâ *{message.from_user.full_name}* –æ—Ç–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ *{correct_answer}*!",  # noqa: E501,
                                            parse_mode="Markdown",
                                            reply_markup=InlineKeyboardMarkup(
                                                [
                                                    [
                                                        InlineKeyboardButton(
                                                            text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞!",
                                                            callback_data="play",
                                                        ),
                                                    ],
                                                ],
                                            ),
                                        )
                                    if games_db.search(User.id == str(group_id)):
                                        games_db.remove(
                                            doc_ids=[
                                                games_db.search(
                                                    User.id == str(group_id),
                                                )[0].doc_id,
                                            ],
                                        )

                                    logger.info(f"Game ended | g_id: {group_id}")  # noqa: G004
                                else:
                                    bot.send_message(
                                        message.chat.id,
                                        "‚ùå –°–µ–π—á–∞—Å –Ω–µ –∏–¥–µ—Ç –Ω–∏–∫–∞–∫–∞—è –∏–≥—Ä–∞!",
                                    )
                            else:
                                correct_embedding = embedding_client.get_embedding(
                                    correct_answer,
                                )
                                given_try_embedding = embedding_client.get_embedding(
                                    given_try,
                                )

                                logger.info(
                                    f"Get {given_try} from {message.from_user.id} | {group_id}",  # noqa: G004, E501
                                )

                                if embedding_client.exist(given_try_embedding):
                                    div = embedding_client.cosine_similarity(
                                        correct_embedding,
                                        given_try_embedding,
                                    )
                                    bot.send_message(
                                        group_id,
                                        f"*{message.from_user.full_name}* –±–ª–∏–∑–æ–∫ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É –Ω–∞ *{round(div * 100, 2)}%*",  # noqa: E501
                                        parse_mode="Markdown",
                                    )
                                    if games_db.search(User.id == str(group_id)):
                                        new_dict1 = games_db.search(
                                            User.id == str(group_id),
                                        )[0]["data"][1]

                                        new_dict1[given_try] = f"{round(div * 100, 2)}%"

                                        new_dict2 = games_db.search(
                                            User.id == str(group_id),
                                        )[0]["data"][3]

                                        new_dict2[str(message.from_user.id)] = [
                                            *new_dict2.get(
                                                str(message.from_user.id),
                                                [],
                                            ),
                                            round(div * 100, 2),
                                        ]

                                        games_db.upsert(
                                            {
                                                "id": str(group_id),
                                                "data": [
                                                    games_db.search(
                                                        User.id == str(group_id),
                                                    )[0]["data"][0],
                                                    new_dict1,
                                                    games_db.search(
                                                        User.id == str(group_id),
                                                    )[0]["data"][2],
                                                    new_dict2,
                                                    games_db.search(
                                                        User.id == str(group_id),
                                                    )[0]["data"][4],
                                                ],
                                            },
                                            User.id == str(group_id),
                                        )

                                else:
                                    bot.send_message(
                                        message.chat.id,
                                        f"‚ùå *{message.from_user.full_name}*, —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",  # noqa: E501
                                        parse_mode="Markdown",
                                    )

                        else:
                            bot.send_message(
                                message.chat.id,
                                f"‚ùå *{message.from_user.full_name}*, –æ—Ç–≥–∞–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤!",  # noqa: E501
                                parse_mode="Markdown",
                            )
                    else:
                        bot.send_message(
                            message.chat.id,
                            f"‚ùå *{message.from_user.full_name}*, –Ω–µ —Å–ø–µ—à–∏! –ö–∞—Ä—Ç–∏–Ω–∫–∞ –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –∏–ª–∏ –≤—ã –≤ –æ—á–µ—Ä–µ–¥–∏.",  # noqa: E501
                            parse_mode="Markdown",
                        )
                else:
                    bot.send_message(
                        message.chat.id,
                        f"‚ùå *{message.from_user.full_name}*, –æ—Ç–≥–∞–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º!",  # noqa: E501
                        parse_mode="Markdown",
                    )
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!",
                )
    except Exception as e:  # noqa: BLE001
        logger.error(f"ERROR: {e}")  # noqa: TRY400, G004
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",  # noqa: RUF001, E501
            parse_mode="Markdown",
        )


@bot.message_handler(commands=["top"])
def top(message: Message) -> None:
    """View top words.

    Parameters
    ----------
    message : telebot.types.Message
        message

    Returns
    -------
    None

    """
    try:
        if games_db.search(User.id == str(message.chat.id)):
            param = get_parameter(message.text)
            if not param:
                param = "5"
            if param.isdigit():
                count = int(param)
                if 1 <= count <= 100:  # noqa: PLR2004
                    prep_val = games_db.search(User.id == str(message.chat.id))[0][
                        "data"
                    ][1]
                    if len(prep_val.keys()) != 0:
                        sorted_words = list(  # noqa: C413
                            sorted(  # noqa: C414
                                list(prep_val.items()),
                                key=lambda x: float(x[1][:-1]),
                                reverse=True,
                            ),
                        )

                        count = (
                            len(sorted_words) if len(sorted_words) < count else count
                        )

                        top = sorted_words[:count]

                        output = ""
                        for i, (word, percentage) in enumerate(top, start=1):
                            output += f"{i}) *{word}*: {percentage}\n"

                        bot.send_message(message.chat.id, output, parse_mode="Markdown")
                        bot.send_photo(
                            message.chat.id,
                            photo=games_db.search(User.id == str(message.chat.id))[0][
                                "data"
                            ][2],
                        )
                    else:
                        bot.send_message(
                            message.chat.id,
                            f"‚ùå *{message.from_user.full_name}*, –Ω–∏–∫–∞–∫–∏—Ö –æ—Ç–≥–∞–¥–æ–∫ –µ—â–µ –Ω–µ—Ç!",  # noqa: E501
                            parse_mode="Markdown",
                        )

                else:
                    bot.send_message(
                        message.chat.id,
                        f"‚ùå *{message.from_user.full_name}*, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç 1 –¥–æ 100.",  # noqa: E501
                        parse_mode="Markdown",
                    )
            else:
                bot.send_message(
                    message.chat.id,
                    f"‚ùå *{message.from_user.full_name}*, –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–æ—Ç 1 –¥–æ 100)!",  # noqa: E501
                    parse_mode="Markdown",
                )
        else:
            bot.send_message(
                message.chat.id,
                f"‚ùå *{message.from_user.full_name}*, –∏–≥—Ä–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –∏–¥–µ—Ç",
                parse_mode="Markdown",
            )
    except Exception as e:  # noqa: BLE001
        bot.send_message(
            message.chat.id,
            f"‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",  # noqa: E501, RUF001
            parse_mode="Markdown",
        )
        logger.error(f"ERROR: {e}")  # noqa: TRY400, G004


def top_final(amount: str, group_id: int) -> None:
    """View final top statistics.

    Parameters
    ----------
    amount : str
        amount of words to view (hardcoded: 10)
    group_id: int
        group id

    Returns
    -------
    None

    """
    prep_val = games_db.search(User.id == str(group_id))[0]["data"][1]

    if len(prep_val.keys()) != 0:
        count = int(amount)

        sorted_words = list(  # noqa: C413
            sorted(list(prep_val.items()), key=lambda x: float(x[1][:-1]), reverse=True)  # noqa: C414, COM812
        )

        count = len(sorted_words) if len(sorted_words) < count else count

        top = sorted_words[:count]

        output = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º:\n\n"
        for i, (word, percentage) in enumerate(top, start=1):
            output += f"{i}) *{word}*: {percentage}\n"

        bot.send_message(group_id, output, parse_mode="Markdown")


def scoreboard_final(group_id: int) -> None:
    """View final player's scoreboard.

    Parameters
    ----------
    group_id: int
        group id

    Returns
    -------
    None

    """
    players = games_db.search(User.id == str(group_id))[0]["data"][3]

    output_list = []
    for elem in players.items():
        output_list.append(  # noqa: PERF401
            [
                bot.get_chat_member(group_id, str(elem[0])).user.first_name,
                len(elem[1]),
                sum(elem[1]) / len(elem[1]),
            ],
        )

    output_list.sort(key=lambda x: x[2], reverse=True)

    result = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–∞–¥—ã–≤–∞–Ω–∏–π, —Å—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è):\n\n"  # noqa: E501

    max_id = max(
        players.keys(),
        key=lambda x: (
            len(bot.get_chat_member(group_id, str(x)).user.first_name)
            + len(str(players[x][0]))
        ),
    )

    max_len = len(bot.get_chat_member(group_id, str(max_id)).user.first_name) + len(
        str(len(players[str(max_id)])),
    )

    for elem in output_list:
        result += f"`{elem[0]}: {' ' * (max_len - len(elem[0]) - len(str(elem[1])))}{elem[1]} | {round(elem[2])}%`\n"  # noqa: E501

    bot.send_message(group_id, result, parse_mode="Markdown")


@bot.message_handler(commands=["stop"])
def stop(message: telebot.types.Message) -> None:
    """Stop the game.

    Parameters
    ----------
    message: telebot.types.Message
        message

    Returns
    -------
    None

    """
    try:
        if message.chat.type != "private":
            if games_db.search(User.id == str(message.chat.id)):
                if games_db.search(User.id == str(message.chat.id))[0]["data"][4] != "":
                    if message.from_user.id == int(
                        games_db.search(User.id == str(message.chat.id))[0]["data"][4],
                    ):
                        games_db.remove(
                            doc_ids=[
                                games_db.search(User.id == str(message.chat.id))[
                                    0
                                ].doc_id,
                            ],
                        )
                        bot.send_message(
                            message.chat.id,
                            f"üõë –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ï—ë –æ—Å—Ç–∞–Ω–æ–≤–∏–ª *{message.from_user.full_name}*.",  # noqa: E501,
                            parse_mode="Markdown",
                        )
                    else:
                        bot.send_message(
                            message.chat.id,
                            f"‚ùå *{message.from_user.full_name}*, —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã!",  # noqa: E501
                            parse_mode="Markdown",
                        )
                else:
                    bot.send_message(
                        message.chat.id,
                        f"‚ùå *{message.from_user.full_name}*, –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å. –í—ã –≤ –æ—á–µ—Ä–µ–¥–∏.",  # noqa: E501
                        parse_mode="Markdown",
                    )
            else:
                bot.send_message(
                    message.chat.id,
                    f"‚ùå *{message.from_user.full_name}*, –∏–≥—Ä–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –∏–¥–µ—Ç",
                    parse_mode="Markdown",
                )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!",
            )
    except Exception as e:  # noqa: BLE001
        bot.send_message(
            message.chat.id,
            f"‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",  # noqa: E501, RUF001
            parse_mode="Markdown",
        )
        logger.error(f"ERROR: {e}")  # noqa: TRY400, G004


@bot.message_handler(commands=["shutdown"])
def shutdown(message: Message) -> None:
    """[admin only] Shutdown the bot.

    Parameters
    ----------
    message: telebot.types.Message
        message

    Returns
    -------
    None

    """
    if message.from_user.id in gods:
        restart = bot.send_message(
            message.chat.id,
            "‚åõÔ∏è –ü—Ä–æ–∏–∑–≤–æ–∂—É —Ä–µ—Å—Ç–∞—Ä—Ç...",
        )
        for game in games_db.all():
            game_id = game["id"]
            bot.send_message(
                int(game_id),
                "‚ÑπÔ∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* ‚ÑπÔ∏è\n\n–°–µ–π—á–∞—Å –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞. –í–∞—à–∞ –∏–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.",  # noqa: E501, RUF001
                parse_mode="Markdown",
            )
        bot.delete_message(message.chat.id, restart.message_id)
        logger.info("shutdowned bot")
        bot.send_message(
            message.chat.id,
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ!",
        )
        bot.stop_bot()


@bot.message_handler(commands=["models"])
def models(message: Message) -> None:
    """View models and their difference.

    Parameters
    ----------
    message: telebot.types.Message
        message

    Returns
    -------
    None

    """
    try:
        photo = open(f"pics/kd{randint(1, 2)}.jpg", "rb")  # noqa: PTH123, SIM115, S311
        bot.send_photo(
            message.chat.id,
            photo,
            """*–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É DALL-E 3 –∏ Kandinsky*\n\n*DALL-E 3* - —ç—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è OpenAI.\n*Kandinsky* - —ç—Ç–æ –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç "–°–±–µ—Ä–∞".\n–û–±–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å–ø–æ—Å–æ–±–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è. *DALL-E 3* –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏–ª–∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞. *Kandinsky* –≤ —Ç–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞ –∏ –Ω–µ—Å–ª–æ–∂–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.""",  # noqa: E501, RUF001
            parse_mode="Markdown",
        )
    except Exception as e:  # noqa: BLE001
        # Send a message indicating that an error occurred
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",  # noqa: RUF001, E501
            parse_mode="Markdown",
        )
        logger.error(f"ERROR: {e}")  # noqa: TRY400, G004


def get_str_token(n: int) -> str:
    """Get string from amount of tokens.

    Parameters
    ----------
    n: int
        amount of tokens

    Returns
    -------
    str
        tokens' form of word

    """
    if n % 10 == 1 and n % 100 != 11:  # noqa: PLR2004
        return "—Ç–æ–∫–µ–Ω"
    if n % 10 >= 2 and n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):  # noqa: PLR2004
        return "—Ç–æ–∫–µ–Ω–∞"
    return "—Ç–æ–∫–µ–Ω–æ–≤"


@bot.message_handler(commands=["balance"])
def balance(message: Message) -> None:
    """View balance.

    Parameters
    ----------
    message: telebot.types.Message
        message

    Returns
    -------
    None

    """
    try:
        if message.chat.type == "private":
            tokens = database_client.get_user_string_by_id(str(message.from_user.id))[3]

            bot.send_message(
                message.chat.id,
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: *{tokens}* {get_str_token(tokens)}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",  # noqa: RUF001
                                callback_data="add_balance",
                            ),
                        ],
                    ],
                ),
                parse_mode="Markdown",
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!",
            )
    except Exception as e:  # noqa: BLE001
        # Send a message indicating that an error occurred
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",  # noqa: E501, RUF001
            parse_mode="Markdown",
        )
        logger.error(f"ERROR: {e}")  # noqa: G004, TRY400


@bot.message_handler(commands=["remove_tokens"])
def handle_remove_tokens(message: Message) -> None:
    """[admin only] Remove tokens from user.

    Usage: /remove_tokens {user_id} {amount}

    Parameters
    ----------
    message: telebot.types.Message
        message

    Returns
    -------
    None

    """
    if message.from_user.id in gods:
        _, user_id, amount = message.text.split()
        database_client.remove_credits_from_user(user_id, amount)
        bot.send_message(
            message.chat.id,
            f"—Ç–æ–∫–µ–Ω—ã –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã. —Å–µ–π—á–∞—Å —É —é–∑–µ—Ä–∞ {database_client.get_user_string_by_id(str(user_id))[3]} —Ç–æ–∫–µ–Ω–æ–≤",  # noqa: E501, RUF001
        )


@bot.message_handler(commands=["add_tokens"])
def handle_add_tokens(message: Message) -> None:
    """[admin only] Add tokens to user.

    Usage: /add_tokens {user_id} {amount}

    Parameters
    ----------
    message: telebot.types.Message
        message

    Returns
    -------
    None

    """
    if message.from_user.id in gods:
        _, user_id, amount = message.text.split()
        database_client.add_credits_to_user(user_id, amount)
        bot.send_message(
            message.chat.id,
            f"—Ç–æ–∫–µ–Ω—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. —Å–µ–π—á–∞—Å —É —é–∑–µ—Ä–∞ {database_client.get_user_string_by_id(str(user_id))[3]} —Ç–æ–∫–µ–Ω–æ–≤",  # noqa: RUF001, E501
        )


@bot.message_handler(content_types=["text"])
def alternative_guess(message: Message) -> None:
    """Alernative to /guess command.

    Parameters
    ----------
    message: telebot.types.Message
        message

    Returns
    -------
    None

    """
    if message.text.lower().startswith("guess") and (
        len(message.text) == 5 or message.text[5] == " "  # noqa: PLR2004
    ):
        message.text = "/" + message.text
        guess(message)
    elif (
        message.reply_to_message
        and message.reply_to_message.from_user.id == bot.get_me().id
    ):
        message.text = "/guess " + message.text
        guess(message)


start_thread(f=from_queue_processing, logger=logger, delay=delay)
logger.info("started bot")
bot.infinity_polling()
